<!DOCTYPE html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Appointments</title>
  <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
</head>
<body>
<div class="row">
  <div class="col-lg-3 sidebar">
    <%= render 'dashboard/sidebar' %>
  </div>
  <div class="col-lg-9 content">
    <div class="container">
      <div class="col-md-12 mb-3 mt-3">
          <div class="row">
            <div class="col-lg-4">
              <div class="form-inline">
                <label for="roleFilter" class="me-2">Filter by Role:</label>
                <select class="form-select" id="roleFilter" onchange="applyFilters()">
                  <option value="">All</option>
                  <option value="buyer">Buyer</option>
                  <option value="seller">Seller</option>
                </select>
              </div>
            </div>
            <div class="col-lg-4">
              <div class="form-inline">
                <label for="statusFilter" class="ms-4 me-2">Filter by Status:</label>
                <select class="form-select" id="statusFilter" onchange="applyFilters()">
                  <option value="">All</option>
                  <option value="pending">Pending</option>
                  <option value="processing">Processing</option>
                  <option value="investigating">Investigating</option>
                  <option value="ready_for_sell">Ready for Sell/Buy</option>
                  <option value="sold">Sold/Bought</option>
                  <option value="reject">Reject/Request Cancel</option>
                </select>
              </div>
            </div>
            <div class="col-lg-4">
              <div class="form-inline">
                <label for="sortOption" class="ms-4 me-2">Sort by:</label>
                <select class="form-select" id="sortOption" onchange="changeSortOption(this.value)">
                  <option value="default">Default</option>
                  <option value="status-asc">Status (Ascending)</option>
                  <option value="status-desc">Status (Descending)</option>
                  <option value="role-asc">User Role (Ascending)</option>
                  <option value="role-desc">User Role (Descending)</option>
                  <option value="car-brand-asc">Car Brand (Ascending)</option>
                  <option value="car-brand-desc">Car Brand (Descending)</option>
                  <option value="car-model-asc">Car Model (Ascending)</option>
                  <option value="car-model-desc">Car Model (Descending)</option>
                  <option value="date-created-asc">Date Created (Newest First)</option>
                  <option value="date-created-desc">Date Created (Oldest First)</option>
                  <option value="appointment-date-asc">Appointment Date (Newest First)</option>
                  <option value="appointment-date-desc">Appointment Date (Oldest First)</option>
                </select>
              </div>
            </div>
          </div>
        </div>
      <div class="row mt-4">
        <% @appointments.each do |app| %>
          <div class="card bg-light pb-4 me-4 mb-3" style="width: 18rem;"
            data-status="<%= app.status %>"
            data-role="<%= app.user.role %>"
            data-car-brand="<%= app.car.brand.name %>"
            data-car-model="<%= app.car.car_model.name %>"
            data-created-date="<%= app.created_at.localtime.strftime('%Y%m%d%H%M%S') %>"
            data-appointment-date="<%= app.date.strftime('%Y%m%d%H%M%S') %>">
            <div class="card-body">
              <h5 class="card-title"><%= app.car.brand.name %> - <%= app.car.car_model.name %></h5>
              <p class="card-text">Reg No: <span id="reg-no-<%= app.id %>"><%= app.car.reg_no %></span></p>
              <p class="card-text">Appointment Type: <%= app.user.role %></p>
              <p class="card-text">Appointment ID: <%= app.appointment_id %></p>
            </div>
            <ul class="list-group list-group-flush">
              <li class="list-group-item">Appointment asked for:<br><strong><%= app.date.strftime('%d %b, %Y')%></strong></li>
              <li class="list-group-item">Status: <strong id="appointment-status-<%= app.id %>"><%= app.status %></strong></li>
              <li class="list-group-item">Taken By: <strong id="appointment-made-by-<%= app.user_id %>"><%= app.user.name %></strong></li>
            </ul>
            <ul class="list-group list-group-flush">
              <li class="list-group-item">Appointment Created on:<br><strong><%= app.created_at.localtime.strftime('%d %b, %Y') %></strong></li>
              <li class="list-group-item">Appointment Updated on:<br><strong><%= app.updated_at.localtime.strftime('%d %b, %Y') %></strong></li>
            </ul>
            <div class="card-body">
              <select class="form-select" name="status" id="appointment-status-select-<%= app.id %>">
                <% if app.user.role == 'buyer' %>
                  <% Appointment.buyer_statuses.each do |status, label| %>
                    <option value="<%= status %>" <%= 'selected' if app.status == status %>>
                      <%= label %>
                    </option>
                  <% end %>
                <% else %>
                  <% Appointment.seller_statuses.each do |status, label| %>
                    <option value="<%= status %>" <%= 'selected' if app.status == status %>>
                      <%= label %>
                    </option>
                  <% end %>
                <% end %>
              </select>
              <button class="btn btn-primary mt-4" onclick="updateAppointmentStatus(<%= app.id %>)" data-appointment-id="<%= app.id %>">Make Changes</button>
            </div>
          </div>
        <% end %>
      </div>
    </div>
  </div>
</div>

<script>
  function updateAppointmentStatus(appointmentId) {
    const selectElement = document.getElementById(`appointment-status-select-${appointmentId}`);
    const newStatus = selectElement.value;
    const currentStatusElement = document.getElementById(`appointment-status-${appointmentId}`);
    const currentStatus = currentStatusElement.innerText;
    const regnoElement = document.getElementById(`reg-no-${appointmentId}`);
    const regNo = regnoElement.innerText;

    if (!isValidStatusTransition(currentStatus, newStatus)) {
      alert('Invalid status transition');
      return;
    }

    $.ajax({
      url: `/appointments/status_update/${appointmentId}`,
      method: 'POST',
      data: {
        status: newStatus,
        reg_no: regNo,
        id: appointmentId,
        authenticity_token: $('meta[name="csrf-token"]').attr('content')
      },
      success: function(response) {
        currentStatusElement.innerText = newStatus;
        alert('Appointment status updated successfully');
      },
      error: function(xhr, status, error) {
        console.error('Request failed');
      }
    });
  }

  function isValidStatusTransition(currentStatus, newStatus) {
    if (!currentStatus || !newStatus) {
      return false;
    }

    const validTransitions = {
      Sell_Pending: ['Sell_Processing', 'Reject'],
      Sell_Processing: ['Sell_Investigating', 'Reject'],
      Sell_Investigating: ['Ready_for_Sell', 'Reject'],
      Ready_for_Sell: ['Sold', 'Reject'],
      Sold: [],
      Reject: [],
      Buy_Pending: ['Buy_Processing', 'Buy_Request_Cancelled'],
      Buy_Processing: ['Buy_Investigating', 'Buy_Request_Cancelled'],
      Buy_Investigating: ['Ready_to_Buy', 'Buy_Request_Cancelled'],
      Ready_to_Buy: ['Bought', 'Buy_Request_Cancelled'],
      Bought: [],
      Buy_Request_Cancelled: []
    };

    return validTransitions[currentStatus].includes(newStatus);
  }

  function applyFilters() {
    const roleFilter = document.getElementById('roleFilter').value;
    const statusFilter = document.getElementById('statusFilter').value;
    const appointments = document.getElementsByClassName('card');

    switch (statusFilter) {
      case 'pending':
        var statusFilter1 = 'Buy_Pending'
        var statusFilter2 = 'Sell_Pending'
        break;
      case 'processing':
        var statusFilter1 = 'Buy_Processing'
        var statusFilter2 = 'Sell_Processing'
        break;
      case 'investigating':
        var statusFilter1 = 'Buy_Investigating'
        var statusFilter2 = 'Sell_Investigating'
        break;
      case 'ready_for_sell':
        var statusFilter1 = 'Ready_to_Buy'
        var statusFilter2 = 'Ready_for_Sell'
        break;
      case 'sold':
        var statusFilter1 = 'Bought'
        var statusFilter2 = 'Sold'
        break;
      case 'reject':
        var statusFilter1 = 'Buy_Request_Cancelled'
        var statusFilter2 = 'Reject'
        break;
      default:
        var statusFilter1 = ''
        var statusFilter2 = ''
        break;
    }

for (let i = 0; i < appointments.length; i++) {
  const appointment = appointments[i];
  const role = appointment.getAttribute('data-role');
  const status = appointment.getAttribute('data-status');

  if (roleFilter && role !== roleFilter) {
    appointment.style.display = 'none';
  } else if (statusFilter && status !== statusFilter && status !== statusFilter1 && status !== statusFilter2) {
    appointment.style.display = 'none';
  } else {
    appointment.style.display = 'block';
  }
}
}

  applyFilters();
</script>

<script>
  function changeSortOption(sortOption) {
  const appointmentsContainer = document.querySelector('.row.mt-4');
  const appointments = Array.from(appointmentsContainer.getElementsByClassName('card'));

  appointments.sort((a, b) => {
    const aStatus = a.getAttribute('data-status');
    const bStatus = b.getAttribute('data-status');
    const aRole = a.getAttribute('data-role');
    const bRole = b.getAttribute('data-role');
    const aCarBrand = a.getAttribute('data-car-brand');
    const bCarBrand = b.getAttribute('data-car-brand');
    const aCarModel = a.getAttribute('data-car-model');
    const bCarModel = b.getAttribute('data-car-model');
    const aCreatedDate = a.getAttribute('data-created-date');
    const bCreatedDate = b.getAttribute('data-created-date');
    const aAppointmentDate = a.getAttribute('data-appointment-date');
    const bAppointmentDate = b.getAttribute('data-appointment-date');

    const compareValues = (valueA, valueB) => {
      if (valueA < valueB) return -1;
      if (valueA > valueB) return 1;
      return 0;
    };

function compareDates(dateA, dateB) {
  const timestampA = new Date(dateA.substring(0, 4), parseInt(dateA.substring(4, 6)) - 1, dateA.substring(6, 8),
    dateA.substring(8, 10), dateA.substring(10, 12), dateA.substring(12, 14)).getTime();
  const timestampB = new Date(dateB.substring(0, 4), parseInt(dateB.substring(4, 6)) - 1, dateB.substring(6, 8),
    dateB.substring(8, 10), dateB.substring(10, 12), dateB.substring(12, 14)).getTime();
  return timestampB - timestampA;
}


const statusOrder = [
  'Sell_Pending',
  'Buy_Pending',
  'Sell_Processing',
  'Buy_Processing',
  'Sell_Investigating',
  'Buy_Investigating',
  'Ready_for_Sell',
  'Ready_to_Buy',
  'Sold',
  'Bought',
  'Reject',
  'Buy_Request_Cancelled'
];
    switch (sortOption) {
       case 'status-asc':
        return compareValues(statusOrder.indexOf(aStatus), statusOrder.indexOf(bStatus)) || compareValues(aRole, bRole) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate);

      case 'status-desc':
        return compareValues(statusOrder.indexOf(bStatus), statusOrder.indexOf(aStatus)) || compareValues(aRole, bRole) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate);

      case 'role-asc':
        return compareValues(aRole, bRole) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'role-desc':
        return compareValues(bRole, aRole) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'car-brand-asc':
        return compareValues(aCarBrand, bCarBrand) || compareValues(aCarModel, bCarModel) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'car-brand-desc':
        return compareValues(bCarBrand, aCarBrand) || compareValues(aCarModel, bCarModel) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'car-model-asc':
        return compareValues(aCarModel, bCarModel) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'car-model-desc':
        return compareValues(bCarModel, aCarModel) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'date-created-asc':
      return compareDates(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'date-created-desc':
      return compareDates(bCreatedDate, aCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'appointment-date-asc':
      return compareDates(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'appointment-date-desc':
      return compareDates(bAppointmentDate, aAppointmentDate) || compareValues(aStatus, bStatus);

      default:
        return compareValues(aStatus, bStatus) || compareValues(aRole, bRole) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate);
    }
  });

  appointmentsContainer.innerHTML = '';
  appointments.forEach(appointment => appointmentsContainer.appendChild(appointment));
}

</script>

</body>
</html>
