<div class="container-fluid ms-5">
  <div class="col-md-12 mb-3 mt-3">
    <% if session[:role] == 'buyer'%>
      <%= link_to  "Back", buyer_feed_path %>
    <%end%>
    <% if session[:role] == 'seller'%>
      <%= link_to  "Back", seller_dashboard_path %>
    <%end%>
    <div class="row">
      <div class="col-lg-4">
        <div class="form-inline">
          <label for="statusFilter" class="ms-4 me-2">Filter by Status:</label>
          <select class="form-select" id="statusFilter" onchange="applyFilters()">
            <option value="">All</option>
            <option value="pending">Pending</option>
            <option value="processing">Processing</option>
            <option value="investigating">Investigating</option>
            <option value="ready_for_sell"> <%= session[:role] == 'buyer'? "Ready to Buy" : "Ready for Sell" %> </option>
            <option value="sold"><%= session[:role] == 'buyer'? "Bought" : "Sold" %></option>
            <option value="reject"><%= session[:role] == 'buyer'? "Buy Request Cancelled" : "Reject"%>
            </option>
          </select>
        </div>
      </div>
      <div class="col-lg-4">
        <div class="form-inline">
          <label for="sortOption" class="ms-4 me-2">Sort by:</label>
          <select class="form-select" id="sortOption" onchange="changeSortOption(this.value)">
            <option value="default">Default</option>
            <option value="status-asc">Status (Ascending)</option>
            <option value="status-desc">Status (Descending)</option>
            <option value="car-brand-asc">Car Brand (Ascending)</option>
            <option value="car-brand-desc">Car Brand (Descending)</option>
            <option value="car-model-asc">Car Model (Ascending)</option>
            <option value="car-model-desc">Car Model (Descending)</option>
            <option value="date-created-asc">Date Created (Newest First)</option>
            <option value="date-created-desc">Date Created (Oldest First)</option>
            <option value="appointment-date-asc">Appointment Date (Newest First)</option>
            <option value="appointment-date-desc">Appointment Date (Oldest First)</option>
          </select>
        </div>
      </div>
    </div>
  </div>
</div>
<div class="conatiner ps-2">
  <div class="row ms-5 me-5 mt-4 mb-3">
    <%@appointments.each do |app|%>
      <% if app.user.id == session[:user_id] %>
  <div class="card bg-light pb-2 me-4" style="width: 18rem;" data-status="<%= app.status %>" data-car-brand="<%= app.car.brand.name %>" data-car-model="<%= app.car.car_model.name %>" data-created-date="<%= app.created_at.strftime('%Y%m%d%H%M%S') %>" data-appointment-date="<%= app.date.strftime('%Y%m%d%H%M%S') %>">
    <div class="card-body">
      <h5 class="card-title"> <%= app.car.brand.name %> - <%= app.car.car_model.name %></h5>
      <h6 class="card-title"> <%= app.car.reg_no %></h6>
      <h6 class="card-text">Appointment ID: <%= app.appointment_id %></h6>
    </div>
    <ul class="list-group list-group-flush">
      <li class="list-group-item">Appointment Status: <strong><%= app.status %></strong></li>
      <li class="list-group-item">Appointment Date: <strong><%= app.date.strftime('%d %b, %Y') %></strong></li>
      <li class="list-group-item">Created At: <strong><%= app.created_at.localtime.strftime('%d %b, %Y, %l:%M %p') %></strong></li>
      <li class="list-group-item">Appointment Updated On: <br><strong><%= app.updated_at.localtime.strftime('%d %b, %Y, %l:%M %p') %></strong></li>
    </ul>
    <% if session[:role] == 'seller' %>
      <% if app.status == 'Ready_for_Sell' %>
        <a href="/appointments/buyers_list/<%= app.id %>" class="btn btn-outline-primary btn-sm mx-4 mt-2">See Buyer's List</a>
      <% else %>
        <button href="#" class="btn btn-outline-primary btn-sm mx-4 mt-2" disabled>See Buyer's List</button>
      <% end %>
    <% end %>
  </div>
<% end %>

    <%end%>

  <% if @appointments == []%>
    <div class="alert alert-secondary h5 text-primary text-center" role="alert">
        You have not booked any appointments yet . Visit your dashboard to book appointments
    </div>
  <%end%>
  </div>
</div>

<script>
  function applyFilters() {
    const statusFilter = document.getElementById('statusFilter').value;
    const appointments = document.getElementsByClassName('card');

    switch (statusFilter) {
      case 'pending':
        var statusFilter1 = 'Buy_Pending'
        var statusFilter2 = 'Sell_Pending'
        break;
      case 'processing':
        var statusFilter1 = 'Buy_Processing'
        var statusFilter2 = 'Sell_Processing'
        break;
      case 'investigating':
        var statusFilter1 = 'Buy_Investigating'
        var statusFilter2 = 'Sell_Investigating'
        break;
      case 'ready_for_sell':
        var statusFilter1 = 'Ready_to_Buy'
        var statusFilter2 = 'Ready_for_Sell'
        break;
      case 'sold':
        var statusFilter1 = 'Bought'
        var statusFilter2 = 'Sold'
        break;
      case 'reject':
        var statusFilter1 = 'Buy_Request_Cancelled'
        var statusFilter2 = 'Reject'
        break;
      default:
        var statusFilter1 = ''
        var statusFilter2 = ''
        break;
    }

for (let i = 0; i < appointments.length; i++) {
  const appointment = appointments[i];
  const status = appointment.getAttribute('data-status');

 if (statusFilter && status !== statusFilter1 && status !== statusFilter2) {
    appointment.style.display = 'none';
  } else {
    appointment.style.display = 'block';
  }
}
}
applyFilters();

</script>

<script>
  function changeSortOption(sortOption) {
  const appointmentsContainer = document.querySelector('.row.mt-4');
  const appointments = Array.from(appointmentsContainer.getElementsByClassName('card'));

  appointments.sort((a, b) => {
    const aStatus = a.getAttribute('data-status');
    const bStatus = b.getAttribute('data-status');
    const aCarBrand = a.getAttribute('data-car-brand');
    const bCarBrand = b.getAttribute('data-car-brand');
    const aCarModel = a.getAttribute('data-car-model');
    const bCarModel = b.getAttribute('data-car-model');
    const aCreatedDate = a.getAttribute('data-created-date');
    const bCreatedDate = b.getAttribute('data-created-date');
    const aAppointmentDate = a.getAttribute('data-appointment-date');
    const bAppointmentDate = b.getAttribute('data-appointment-date');

    const compareValues = (valueA, valueB) => {
      if (valueA < valueB) return -1;
      if (valueA > valueB) return 1;
      return 0;
    };

function compareDates(dateA, dateB) {
  const timestampA = new Date(dateA.substring(0, 4), parseInt(dateA.substring(4, 6)) - 1, dateA.substring(6, 8),
    dateA.substring(8, 10), dateA.substring(10, 12), dateA.substring(12, 14)).getTime();
  const timestampB = new Date(dateB.substring(0, 4), parseInt(dateB.substring(4, 6)) - 1, dateB.substring(6, 8),
    dateB.substring(8, 10), dateB.substring(10, 12), dateB.substring(12, 14)).getTime();
  return timestampB - timestampA;
}


const statusOrder = [
  'Sell_Pending',
  'Buy_Pending',
  'Sell_Processing',
  'Buy_Processing',
  'Sell_Investigating',
  'Buy_Investigating',
  'Ready_for_Sell',
  'Ready_to_Buy',
  'Sold',
  'Bought',
  'Reject',
  'Buy_Request_Cancelled'
];
    switch (sortOption) {
       case 'status-asc':
        return compareValues(statusOrder.indexOf(aStatus), statusOrder.indexOf(bStatus)) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate);

      case 'status-desc':
        return compareValues(statusOrder.indexOf(bStatus), statusOrder.indexOf(aStatus)) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate);

      case 'car-brand-asc':
        return compareValues(aCarBrand, bCarBrand) || compareValues(aCarModel, bCarModel) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'car-brand-desc':
        return compareValues(bCarBrand, aCarBrand) || compareValues(aCarModel, bCarModel) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'car-model-asc':
        return compareValues(aCarModel, bCarModel) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'car-model-desc':
        return compareValues(bCarModel, aCarModel) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'date-created-asc':
      return compareDates(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'date-created-desc':
      return compareDates(bCreatedDate, aCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'appointment-date-asc':
      return compareDates(aAppointmentDate, bAppointmentDate) || compareValues(aStatus, bStatus);

      case 'appointment-date-desc':
      return compareDates(bAppointmentDate, aAppointmentDate) || compareValues(aStatus, bStatus);

      default:
        return compareValues(aStatus, bStatus) || compareValues(aCreatedDate, bCreatedDate) || compareValues(aAppointmentDate, bAppointmentDate);
    }
  });

  appointmentsContainer.innerHTML = '';
  appointments.forEach(appointment => appointmentsContainer.appendChild(appointment));
}

</script>
